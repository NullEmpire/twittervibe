// Generated by CoffeeScript 1.6.2
(function() {
  var app, async, config, express, fs, models, passport, port, request, roundRobot, server, sphero, _;

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  passport = require('passport');

  config = require('./config/config');

  fs = require('fs');

  async = require('async');

  request = require('request');

  _ = require('underscore');

  models = __dirname + '/models';

  fs.readdirSync(models).forEach(function(file) {
    return require(models + '/' + file);
  });

  require('./config/passport')(passport, config);

  require('./config/express')(app, passport);

  require('./config/routes')(app, passport);

  roundRobot = require('node-sphero');

  sphero = new roundRobot.Sphero();

  sphero.on('connected', function(ball) {
    console.log('CONNECTED');
    twit.stream('statuses/sample', {}, function(stream) {});
    stream.on('data', function(data) {
      return text.push(data.text);
    });
    return setInterval(function() {
      var t;

      t = text[Math.floor(Math.random() * text.length)];
      tasks.push(function(cb) {
        return request('http://access.alchemyapi.com/calls/text/TextGetTextSentiment?apikey=c66401c4852d9fd88e7f66657056f3fabbb7680e&outputMode=json&text=' + t, function(err, response, body) {
          var res;

          res = JSON.parse(body);
          if (res.status === 'ERROR') {
            cb();
            return;
          }
          sentiment[res.docSentiment.type]++;
          return cb();
        });
      });
      return async.series(tasks, function() {
        var i, s, sort, text;

        console.log('done');
        sort = [];
        for (i in sentiment) {
          sort.push(i, sentiment[i]);
        }
        sort.sort(function(a, b) {
          return a[1] - b[1];
        });
        sort.reverse();
        s = sort[0];
        if (s[0] === 'negative') {
          ball.setRGBLED(255, 0, 0, 1);
        } else if (s[0] === 'netural') {
          ball.setRGBLED(255, 255, 255, 1);
        } else {
          ball.setRGBLED(0, 255, 0, 1);
        }
        return text = [];
      });
    }, 5000);
  });

  sphero.connect();

  port = process.env.PORT || 5000;

  server.listen(port, function() {
    return console.log("Server running on port " + port);
  });

}).call(this);
